;;; TODO: make into a macro
(defun each (func lizt)
  (if (not (nil? lizt))
    (progn
      (func (car lizt))
      (each func (cdr lizt)))))

;;; TODO: make into a macro
(defun each-cons (func lizt)
  (if (not (nil? lizt))
    (progn
      (func lizt)
      (each-cons func (cdr lizt)))))

(defun upto (upper-bound func)
  (%upto 0 upper-bound func))

(defun %upto (n upper-bound func)
  (if (not (eq? n upper-bound))
    (progn
      (func n)
      (%upto (+ 1 n) upper-bound func))))

(defun enumerate (func lizt)
  (%enumerate func lizt 0))

(defun %enumerate (func lizt current-index)
  (unless (nil? lizt)
    (func current-index (car lizt))
    (%enumerate func (cdr lizt) (+ 1 current-index))))
