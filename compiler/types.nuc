;;; TODO: Replace with a struct once they exist
;;; A 'term' is the compile-time form of a nucleus value. It has a corresponding
;;; LLVMValueRef, type, and boolean indicating whether it is an lvalue (i.e.
;;; can be assigned to). If the type is unknown, it defaults to ?, the dynamic
;;; type.
(defun make-term (typ val lvalue?) (list typ val lvalue?))
(defun tt (term) (first term))
(defun tv (term) (second term))
(defun tl? (term) (third term))

(defun coerce (context term typ)
  ;(format true "(coerce ... ~ ~)" term typ)
  (cond
    ((eq? (tt term) typ) term)
    ((eq? (tt term) '?) (make-term typ (static-val<-dynamic-val context typ (tv term)) (tl? term)))
    ((eq? typ '?)
     (make-term typ (dynamic-val<-static-val context (tt term) (tv term)) (tl? term)))
    (true
      (make-term typ (implicit-conversion context term typ) (tl? term)))))

(defun consistent? (type1 type2)
  (cond
    ((eq? type1 type2) true)
    ((eq? type1 '?) true)
    ((eq? type2 '?) true)))

(defun numeric (typ) (member? typ '(int uint long long-long uint8 u8 i32 i64)))

(defun type-width (context typ)
  (LLVMGetIntTypeWidth (llvm-type<-type-spec context typ)))

(defun remove-lowtag (val)
  (LLVMBuildAnd $builder val
                ;; This is (~ (- (<< 1 LOWTAG-BITS) 1)).
                ;; We can't write that directly as it exceeds the 61-bit limit
                ;; of nucleus fixnums
                (LLVMConstIntOfString (LLVMIntType 64) "fffffffffffffff8" 16)
                "remove-lowtag"))

;;; TODO: rework some of this stuff

(defun add-lowtag (val tag)
  (LLVMBuildOr $builder
               (LLVMBuildPtrToInt $builder val NUC-VAL "ptr-to-int")
               (llvm-i64<-int tag) "add-lowtag"))

(defun fixnum<-llvm-int (val)
  (add-lowtag (LLVMBuildShl $builder val (llvm-i64<-int LOWTAG-BITS) "")
              FIXNUM-LOWTAG))

(defun check-type (val type-as-llvm-val)
  (if (cons? type-as-llvm-val)
    (llvm-build-call
      $builder
      (runtime-func "rt_check_union_type" VOID (list NUC-VAL NUC-VAL NUC-VAL))
      ;; TODO: should make rt_check_union_type varargs
      (list val (first type-as-llvm-val) (second type-as-llvm-val))
      "")
    (llvm-build-call
      $builder
      (runtime-func "rt_check_type" VOID (list NUC-VAL NUC-VAL CHAR* CHAR* INT))
      (list val type-as-llvm-val (LLVMConstNull CHAR*) (LLVMConstNull CHAR*)
            (llvm-i32<-int 0))
      "")))

(defun llvm-i64<-int (x) (LLVMConstInt (LLVMIntType 64) x false))
(defun llvm-i32<-int (x) (LLVMConstInt (LLVMIntType 32) x false))
(defun llvm-i8<-int (x) (LLVMConstInt (LLVMIntType 8) x false))

;;; TODO: this should probably have an extra phase - converting into a nucleus
;;; type object.

(defun llvm-type<-type-spec (context type-spec)
  (case type-spec
    ;; FFI stuff
    ('* UINTPTR)
    ('char* CHAR*)
    ('void VOID)
    ('int INT) ('uint INT) ('bool INT)
    ('long LONG)
    ('long-long LONG-LONG)
    ('array (LLVMPointerType UINTPTR 0))

    ;; Fixed width integer types
    ;; TODO: remove duplicates (only there for bootstrapping)
    ('uint8 (LLVMIntType 8))
    ('u8 (LLVMIntType 8))
    ('i32 (LLVMIntType 32))
    ('i64 (LLVMIntType 64))

    ;; Primitive nucleus types
    ('? NUC-VAL)
    ('symbol (LLVMIntType 32))
    ('bool (LLVMIntType 32))
    ('string STRING-PTR)
    ('cons CONS-CELL-PTR)
    ;; TODO: what size should a statically typed nil be? 32 or 64 bits?
    ('nil-t (LLVMIntType 64))

    (default (fail! context (format nil "Unsupported type-spec '~'" type-spec)))))

(defun type-id<-type-spec (context type-spec)
  (case type-spec
    ;; FFI stuff
    ('* LLVM-FOREIGN-T)
    ('char* LLVM-STRING-T)
    ('void LLVM-NIL-T)
    ('int LLVM-FIXNUM-T) ('uint LLVM-FIXNUM-T) ('long-long LLVM-FIXNUM-T)
    ('uint8 LLVM-FIXNUM-T) ('u8 LLVM-FIXNUM-T) ('i32 LLVM-FIXNUM-T)
    ('i64 LLVM-FIXNUM-T)

    ;; Primitive nucleus types
    ('symbol LLVM-SYMBOL-T)
    ('bool LLVM-BOOL-T)
    ('string LLVM-STRING-T)
    ('nil-t LLVM-NIL-T)

    (default (fail! context (format nil "Unsupported type-spec '~'" type-spec)))))

(defun static-val<-dynamic-val (context type-spec val)
  ;(format true "(s-v<-d-v ... ~ ~)" type-spec val)
  (cond
    ((eq? type-spec '*)
     (check-type val LLVM-FOREIGN-T)
     (LLVMBuildIntToPtr
       $builder
       (LLVMBuildLoad
         $builder
         (LLVMBuildIntToPtr
           $builder (remove-lowtag val) (LLVMPointerType NUC-VAL 0) "")
         "")
       UINTPTR
       ""))
    ((eq? type-spec 'char*)
     (check-type val LLVM-STRING-T)
     (llvm-build-call
       $builder
       (runtime-func "rt_nuc_str_to_c_str" CHAR* (list NUC-VAL))
       (list val) "static-val<-dynamic-val"))
    ((member? type-spec (list 'int 'uint 'long 'long-long 'uint8
                              'i32 'i64))
     (check-type val LLVM-FIXNUM-T)
     (LLVMBuildIntCast
       $builder
       (LLVMBuildAShr $builder val (llvm-i64<-int LOWTAG-BITS) "remove-int-tag")
       (llvm-type<-type-spec context type-spec)
       ""))
    ((eq? type-spec 'bool)
     (check-type val LLVM-BOOL-T)
     (LLVMBuildSelect $builder (LLVMBuildICmp $builder LLVMIntEQ val LLVM-TRUE "")
                      (llvm-i32<-int 1) (llvm-i32<-int 0) ""))
    ((eq? type-spec 'string)
     (check-type val LLVM-STRING-T)
     (LLVMBuildIntToPtr $builder (remove-lowtag val) STRING-PTR ""))
    ((eq? type-spec 'array)
     (check-type val (list LLVM-CONS-T LLVM-NIL-T))
     (llvm-build-call
       $builder
       (runtime-func "rt_list_to_array" (llvm-type<-type-spec context type-spec) (list NUC-VAL))
       (list val)
       "array<-list"))
    ((eq? type-spec 'symbol)
     (check-type val LLVM-SYMBOL-T)
     (LLVMBuildIntCast
       $builder
       (LLVMBuildLShr $builder val (llvm-i64<-int LOWTAG-BITS) "remove-symbol-lowtag")
       (llvm-type<-type-spec context type-spec)
       ""))
    ((eq? type-spec 'cons)
     (check-type val LLVM-CONS-T)
     (LLVMBuildIntToPtr $builder (remove-lowtag val) CONS-CELL-PTR ""))
    ((eq? type-spec 'nil-t)
     (check-type val LLVM-NIL-T)
     (llvm-i64<-int 0))
    ((eq? type-spec 'type)
     ;; TODO: We should have a separate exttag for types so that we can do a
     ;; check-type here.
     (LLVMBuildLShr $builder val (llvm-i64<-int (+ LOWTAG-BITS EXTTAG-BITS)) ""))
    (true (fail! context (format nil "Unsupported type-spec '~'" type-spec)))))

(defun dynamic-val<-static-val (context type-spec val)
  ;(format true "(d-v<-s-v ... ~ ~)" type-spec val)
  (cond
    ((eq? type-spec '*)
      (add-lowtag
        (let ((box (gc-alloc PTR-BYTES)))
          (LLVMBuildStore $builder (LLVMBuildPtrToInt $builder val NUC-VAL "") box)
          box)
        FOREIGN-LOWTAG))
    ((eq? type-spec 'void) LLVM-NIL)
    ((member? type-spec (list 'int 'uint 'long 'long-long 'uint8 'i32 'i64))
     (fixnum<-llvm-int (LLVMBuildIntCast $builder val NUC-VAL "cast-int-to-nuc-val")))
    ((eq? type-spec 'bool)
     ;(format true "d-v<-s-v: val = ~" val)
     (let ((zero (LLVMConstInt (LLVMTypeOf val) 0 false)))
       (LLVMBuildSelect $builder
                        (LLVMBuildICmp $builder LLVMIntEQ val zero "")
                        LLVM-FALSE LLVM-TRUE "")))
    ((eq? type-spec 'string) (add-lowtag val STRING-LOWTAG))
    ((eq? type-spec 'symbol)
     (LLVMBuildOr
       $builder
       (LLVMBuildShl $builder (LLVMBuildZExt $builder val NUC-VAL "")
                     (llvm-i64<-int LOWTAG-BITS)
                     "")
       (llvm-i64<-int SYMBOL-LOWTAG)
       ""))
    ((eq? type-spec 'cons)
     (add-lowtag val CONS-LOWTAG))
    ((eq? type-spec 'nil-t) LLVM-NIL)
    ((eq? type-spec 'type)
     (LLVMBuildOr
       $builder
       (LLVMBuildShl
       $builder
       val
       (llvm-i32<-int (+ LOWTAG-BITS EXTTAG-BITS))
       "")
       (llvm-i32<-int (+ EXTTAG-LOWTAG (<< DISCRETE-EXTTAG LOWTAG-BITS)))
       ""))
    (true (fail! context (format nil "Unsupported type-spec '~'" type-spec)))  ))

(defun implicit-conversion (context term typ)
  ;(format true "(implicit-conversion ... ~ ~)" term typ)
  (cond
    ((and (numeric (tt term)) (numeric typ))
     (LLVMBuildIntCast
       $builder
       (tv term)
       (llvm-type<-type-spec context typ)
       ""))
    ((and (eq? (tt term) 'string) (eq? typ 'char*))
     (LLVMBuildBitCast
       $builder
       (LLVMBuildStructGEP $builder (tv term) 1 "")
       CHAR*
       ""))
    ;; TODO: this sucks
    ((and (eq? (tt term) 'cons) (eq? typ 'array))
     (llvm-build-call
       $builder
       (runtime-func "rt_list_to_array" (llvm-type<-type-spec context typ) (list NUC-VAL))
       (list (add-lowtag (tv term) CONS-LOWTAG))
       "array<-list"))
    (true (fail! context
                 (format nil
                         "Static type error: tried to use a term of type '~' where '~' was wanted"
                         (tt term) typ)))))

;;; Given a bunch of terms, which are arguments to some arithmetic builtin, this
;;; converts them all to the same type, determined by the largest width of all
;;; given terms.
(defun arithmetic-conversion (context terms)
  (let ((max-width-type 'u8))
    (each (lambda (term)
            (let ((typ (tt term)))
              (if (not (or (eq? typ '?) (numeric typ)))
                (fail! context (format nil "Static type error: tried to use a term of type '~' where a numeric type was expected"
                                       typ)))
              (if (> (type-width context typ)
                     (type-width context max-width-type))
                (set max-width-type typ))))
          terms)
    ;; We need to make sure we have an actual integral type at this point, not
    ;; a tagged value.
    (if (eq? max-width-type '?)
      (set max-width-type 'i64))
    (cons max-width-type
          (map (lambda (term) (tv (coerce context term max-width-type)))
               terms))))
