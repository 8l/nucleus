;;; TODO: including a directory should look for 'lib' inside it
(include "llvm/lib")

;;; TODO: currently we have to put "types" before "builtins", as there are some
;;; static initializers in "builtins" that depend on variables in "types", and
;;; we don't currently figure out dependencies and order the initializers
;;; appropriately. This shouldn't be necessary later.
(include "types")
(include "builtins")
(include "util")

(defvar $builder)
(defvar $module)

(defun main ()
  (cond
    ((not (length-is? $argv 1))
     (set $builder (LLVMCreateBuilder))
     (let ((non-flag-args nil)
           (output-llvm-ir false))
       (each (lambda (arg)
               (if (string-eq? arg "-ir")
                 (set output-llvm-ir true)
                 (set non-flag-args (cons arg non-flag-args))))
             $argv)
       (set non-flag-args (reverse non-flag-args))
       (let* ((input-filename (second non-flag-args))
              (output-filename (if (length-is? non-flag-args 2)
                                 "a.out"
                                 (third non-flag-args)))
              (stream (open input-filename))
              (llvm-context (LLVMGetGlobalContext))
              (context (make-context nil))
              (forms (read-all stream)))
         (set $module (LLVMModuleCreateWithNameInContext
                        input-filename llvm-context))
         (close stream)
         (set forms (cons (quote (defvar $status-code)) forms))
         (each process-form forms)
         (each (lambda (f) (compile-function context (cdr f))) $functions)
         (let ((entry-point (LLVMGetNamedFunction
                              $module (mangle-name (quote main))))
               (main-func (LLVMAddFunction $module "main"
                                           (LLVMFunctionType INT nil 0 false))))
           (when (null? entry-point)
             (panic! "No main function defined."))
           (LLVMPositionBuilderAtEnd $builder
                                     (LLVMAppendBasicBlock main-func "entry"))
           ;; TODO: static initialisation here
           (LLVMBuildCall $builder entry-point nil 0 "")
           (LLVMBuildRet
             $builder
             (LLVMBuildIntCast
               $builder
               (LLVMBuildLShr
                 $builder
                 (LLVMBuildLoad
                   $builder (get-lvalue context (quote $status-code)) "")
                 (llvm-val<-int LOWTAG-BITS)
                 "")
               INT
               "truncate-main-result")))
         (when (LLVMVerifyModule $module LLVMPrintMessageAction NULL)
           (LLVMDumpModule $module)
           (panic! "ICE: Module failed LLVMVerifyModule. Module has been dumped"))
         ;; TODO: not portable
         (let ((tmp-bc-file (format nil "/tmp/~.bc" (random)))
               (tmp-o-file (format nil "/tmp/~.o" (random))))
           (LLVMWriteBitcodeToFile $module tmp-bc-file)
           (cond
             (output-llvm-ir
               (let ((llvm-dis-success
                       (zero? (exec "llvm-dis"
                                    (list tmp-bc-file "-o" output-filename)))))
                 (exec "rm" (list tmp-bc-file))
                 (unless llvm-dis-success
                   (panic! "llvm-dis failed"))))
             (true (unless (zero? (exec "llc" (list tmp-bc-file "-filetype=obj"
                                                    "-o" tmp-o-file)))
                     (exec "rm" (list tmp-bc-file))
                     (panic! "llc failed"))
                (unless (zero? (exec "gcc" (list tmp-o-file "-o" output-filename)))
                  (exec "rm" (list tmp-bc-file tmp-o-file))
                  (panic! "gcc failed"))
                (exec "rm" (list tmp-bc-file tmp-o-file))))))))
    (true 
      (write-string-ln "Usage: nucc <input filename>"))))

(defun process-form (form)
  (case (first form)
    ((quote defun)
     (let* ((name (second form))
            (args (third form))
            (arity (length args))
            (body (cdddr form))
            (llvm-func
              (declare-function
                (second form) NUC-VAL (map (lambda (_) NUC-VAL) (third form)))))
       (add-func (make-func name arity args body llvm-func))))
    ((quote defvar)
     (let ((name (second form)))
       (LLVMSetInitializer (LLVMAddGlobal $module NUC-VAL (mangle-name name))
                           (llvm-val<-int 0))))))

(defun compile-expr (context expr)
  ;(format true "Compiling ~ in env ~" expr context)
  (case (type expr)
    ;; TODO: limit on size
    (fixnum-t (llvm-val<-int (<< expr LOWTAG-BITS)))
    (symbol-t
      ;; TODO: constants
      (let ((value (get-value context expr)))
        (if (nil? value)
          (panic! (format nil "Undefined variable '~'" expr))
          value)))
    (cons-t (compile-form context expr))
    #+nil
    (string-t (llvm:build-call
              *builder*
              (extern-func "rt_make_string" *nuc-val* *size-t*
                           (llvm:pointer-type (llvm:int-type 8)))
              (list (llvm-val<-int (length expr))
                    (llvm:build-gep
                      *builder*
                      (llvm:build-global-string *builder* expr "string-lit")
                      (make-array (list 2) :initial-element (llvm-val<-int 0))
                      "str-to-ptr"))
              "make-literal-string"))
    (default (panic!
               (format nil
                       "Don't know how to compile this type of expression: ~"
                       expr)))))

(defun compile-form (context form)
  (let* ((name (car form))
         (args (cdr form))
         (special-form (get-special-form name)))
    (if (not (nil? special-form))
      (special-form context args)
      (let ((builtin-function (get-builtin-function name)))
        (if (not (nil? builtin-function))
          (builtin-function (map (lambda (arg) (compile-expr context arg)) args))
          (let ((func (get-func name)))
            (if (nil? func)
              (panic! (format nil "Undefined function '~'" name))
              (LLVMBuildCall
                $builder
                (func-llvm-func func)
                (map compile-expr args)
                (length args)
                ""))))))))
