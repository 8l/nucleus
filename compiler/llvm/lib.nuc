(cfun LLVMGetGlobalContext () -> *)

(cfun LLVMCreateBuilder () -> *)

(cfun LLVMModuleCreateWithNameInContext (char* *) -> *)
(cfun LLVMDumpModule (*) -> void)
(cfun LLVMWriteBitcodeToFile (* char*) -> int)
(cfun LLVMDisposeModule (*) -> void)
(cfun LLVMAddFunction (* char* *) -> *)
(cfun LLVMGetNamedFunction (* char*) -> *)
(cfun LLVMAddGlobal (* * char*) -> *)
(cfun LLVMGetNamedGlobal (* char*) -> *)
(cfun LLVMSetInitializer (* *) -> void)

(cfun LLVMConstInt (* long-long bool) -> *)
(cfun LLVMConstIntOfString (* char* uint8) -> *)
(cfun LLVMConstNull (*) -> *)

(cfun LLVMAppendBasicBlock (* char*) -> *)
(cfun LLVMGetInsertBlock (*) -> *)
(cfun LLVMGetBasicBlockParent (*) -> *)
(cfun LLVMPositionBuilderAtEnd (* *) -> void)
(cfun LLVMAddIncoming (* array array uint) -> void)
(defun get-current-func (builder)
  (LLVMGetBasicBlockParent (LLVMGetInsertBlock builder)))

(cfun LLVMTypeOf (*) -> *)
(cfun LLVMGetIntTypeWidth (*) -> uint)

(cfun LLVMIntType (uint) -> *)
(cfun LLVMPointerType (* uint) -> *)
(cfun LLVMStructType (array uint bool) -> *)
(cfun LLVMArrayType (* uint) -> *)
(cfun LLVMFunctionType (* array uint bool) -> *)
(cfun LLVMVoidType () -> *)

(cfun LLVMBuildAdd (* * * char*) -> *)
(cfun LLVMBuildSub (* * * char*) -> *)
(cfun LLVMBuildMul (* * * char*) -> *)
(cfun LLVMBuildSDiv (* * * char*) -> *)
(cfun LLVMBuildSRem (* * * char*) -> *)
(cfun LLVMBuildLShr (* * * char*) -> *)
(cfun LLVMBuildAShr (* * * char*) -> *)
(cfun LLVMBuildShl (* * * char*) -> *)
(cfun LLVMBuildAnd (* * * char*) -> *)
(cfun LLVMBuildOr (* * * char*) -> *)
(cfun LLVMBuildIntCast (* * * char*) -> *)
(cfun LLVMBuildBitCast (* * * char*) -> *)
(cfun LLVMBuildZExt (* * * char*) -> *)
(cfun LLVMBuildIntToPtr (* * * char*) -> *)
(cfun LLVMBuildPtrToInt (* * * char*) -> *)
(cfun LLVMBuildSelect (* * * * char*) -> *)
(cfun LLVMBuildCall (* * array uint char*) -> *)
(defun llvm-build-call (builder func args name)
  ;(format true "(l-b-c ... ~)" name)
  (LLVMBuildCall builder func args (length args) name))
(cfun LLVMBuildGEP (* * array uint char*) -> *)
(cfun LLVMBuildStructGEP (* * uint char*) -> *)
(cfun LLVMBuildBr (* *) -> *)
(cfun LLVMBuildCondBr (* * * *) -> *)
(cfun LLVMBuildPhi (* * char*) -> *)
(cfun LLVMBuildStore (* * *) -> *)
(cfun LLVMBuildLoad (* * char*) -> *)
(cfun LLVMBuildAlloca (* * char*) -> *)
(cfun LLVMBuildGlobalString (* char* char*) -> *)
(cfun LLVMBuildRetVoid (*) -> *)
(cfun LLVMBuildRet (* *) -> *)

(cfun LLVMBuildICmp (* uint * * char*) -> *)
(cenum
  (LLVMIntEQ 32)
  LLVMIntNE
  LLVMIntUGT
  LLVMIntUGE
  LLVMIntULT
  LLVMIntULE
  LLVMIntSGT
  LLVMIntSGE
  LLVMIntSLT
  LLVMIntSLE)

(cfun LLVMSetValueName (* char*) -> void)
(cfun LLVMDumpValue (*) -> void)
(cenum
  LLVMAbortProcessAction
  LLVMPrintMessageAction
  LLVMReturnStatusAction)
(cfun LLVMVerifyModule (* uint *) -> bool)
(cfun LLVMVerifyFunction (* uint) -> bool)


(cfun LLVMGetFirstParam (*) -> *)
(cfun LLVMGetNextParam (*) -> *)
(cfun LLVMCountParams (*) -> uint)

(defun llvm-params (func)
  (let ((first-param (LLVMGetFirstParam func)))
    (if (null? first-param)
      nil
      (let ((list-head (cons first-param nil)))
        (%llvm-params func list-head)
        list-head))))

(defun %llvm-params (func list-head)
  (let ((param (LLVMGetNextParam (car list-head))))
    (unless (null? param)
      (set-cdr list-head (cons param nil))
      (%llvm-params func (cdr list-head)))))

(defun llvm-phi (builder phi-type pairs)
  (let ((phi (LLVMBuildPhi builder phi-type "")))
    (LLVMAddIncoming phi (map car pairs) (map cdr pairs) (length pairs))
    phi))
