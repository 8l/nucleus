;;;; Everything to do with conses

(extern rt_cons 2 -> cons)
(extern rt_set_car 2 -> set-car)
(extern rt_set_cdr 2 -> set-cdr)
(extern rt_char_list_to_string 1 -> string<-char-list)

(defun caar (c) (car (car c)))
(defun cadr (c) (car (cdr c)))
(defun cdar (c) (cdr (car c)))
(defun cddr (c) (cdr (cdr c)))
(defun caaar (c) (car (car (car c))))
(defun caadr (c) (car (car (cdr c))))
(defun cadar (c) (car (cdr (car c))))
(defun caddr (c) (car (cdr (cdr c))))
(defun cdaar (c) (cdr (car (car c))))
(defun cdadr (c) (cdr (car (cdr c))))
(defun cddar (c) (cdr (cdr (car c))))
(defun cdddr (c) (cdr (cdr (cdr c))))
(defun caaaar (c) (car (car (car (car c)))))
(defun caaadr (c) (car (car (car (cdr c)))))
(defun caadar (c) (car (car (cdr (car c)))))
(defun caaddr (c) (car (car (cdr (cdr c)))))
(defun cadaar (c) (car (cdr (car (car c)))))
(defun cadadr (c) (car (cdr (car (cdr c)))))
(defun caddar (c) (car (cdr (cdr (car c)))))
(defun cadddr (c) (car (cdr (cdr (cdr c)))))
(defun cdaaar (c) (cdr (car (car (car c)))))
(defun cdaadr (c) (cdr (car (car (cdr c)))))
(defun cdadar (c) (cdr (car (cdr (car c)))))
(defun cdaddr (c) (cdr (car (cdr (cdr c)))))
(defun cddaar (c) (cdr (cdr (car (car c)))))
(defun cddadr (c) (cdr (cdr (car (cdr c)))))
(defun cdddar (c) (cdr (cdr (cdr (car c)))))
(defun cddddr (c) (cdr (cdr (cdr (cdr c)))))

(defun cons? (x)
  (eq? (type x) cons-t))

(defun nil? (x)
  (eq? x nil))

(defun member? (elem lizt)
  (if (nil? lizt)
    false
    (or (eq? (car lizt) elem)
        (member? elem (cdr lizt)))))
