;;; TODO: Replace with a struct once they exist
(defun make-func (name arity args body llvm-func)
  (list name arity args body llvm-func))
(defun func-name (func) (first func))
(defun func-arity (func) (second func))
(defun func-args (func) (third func))
(defun func-body (func) (fourth func))
(defun func-llvm-func (func) (fifth func))

;;; TODO: Replace with a hash table once that exists
;;; TODO: These should go in the context, along with $module and $builder
(defvar $functions nil)

;;; TODO: Replace with a struct once they exist
(defun make-context (env current-func) (list env current-func))
(defun context-env (context) (first context))
(defun context-current-func (context) (second context))
(defun context-set-env (context new-env) (set-car context new-env))
(defun context-set-current-func (context new-func)
  (set-car (cdr context) new-func))

(defun add-func (f)
  (cond
    ((not (nil? (get-func (func-name f))))
     (format true "Duplicate definition of function '~'" (func-name f))
     (write-string-ln "")
     (panic! "Aborting"))
    (true
      (set $functions (cons (cons (func-name f) f) $functions)))))

(defun get-func (name)
  (let ((f (assoc name $functions)))
    (if (nil? f) nil (cdr f))))

(defun mangle-name (name)
  (format nil "nuc(~)" name))

(defun extend-env (context vars values)
  (let ((env (context-env context))
        (current-func (context-current-func context)))
    (each (lambda (name-and-value)
            (let ((var (car name-and-value))
                  (value (cdr name-and-value))
                  (var-on-stack (LLVMBuildAlloca $builder NUC-VAL "")))
              (LLVMBuildStore $builder value var-on-stack "")
              (set env (cons (cons var var-on-stack) env))))
          (zip vars values))
    (make-context env current-func)))

(defun declare-function (name ret-type arg-types)
  (LLVMAddFunction
    $module
    (mangle-name name)
    (LLVMFunctionType ret-type arg-types (length arg-types) false)))

(defun remove-lowtag (nuc-val)
  (LLVMBuildAnd
    $builder
    nuc-val
    ;; TODO: replace with (~ (1- (<< 1 LOWTAG-BITS)))
    (llvm-val<-int 18446744073709551608)
    "remove-lowtag"))

(defun llvm-val<-int (x)
  (LLVMConstInt NUC-VAL x false))

(defun cons<-nuc-val (nuc-val)
  ; TODO: type checking
  (LLVMBuildIntToPtr
    $builder
    (remove-lowtag nuc-val)
    CONS-CELL-PTR
    ""))

(defun compile-progn (context forms)
  (let ((e (compile-expr context (car forms))))
    (if (nil? (cdr forms))
      e
      (compile-progn context (cdr forms)))))

(defun get-value (context name)
  (let ((lvalue (get-lvalue context name)))
    (if (nil? lvalue)
      (get-constant name)
      (LLVMBuildLoad $builder lvalue (string<-symbol name)))))

(defun get-lvalue (context name)
  (let ((global (LLVMGetNamedGlobal $module (mangle-name name))))
    (if (not (null? global))
      global
      (let ((lexical-binding (assoc name (context-env context))))
        (if (nil? lexical-binding)
          nil
          (cdr lexical-binding))))))

(defun runtime-func (name return-type arg-types)
  (let ((func (LLVMGetNamedFunction $module name)))
    (if (not (null? func))
      func
      (LLVMAddFunction
        $module name
        (LLVMFunctionType return-type arg-types (length arg-types) false)))))

(defun global-string (str)
  (LLVMBuildGEP
    $builder
    (LLVMBuildGlobalString $builder str "")
    (list (llvm-val<-int 0) (llvm-val<-int 0))
    2
    "str-to-ptr"))
