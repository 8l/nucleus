;;;; This file defines all primitive functions relating to input and output.

(extern rt_write_char 1 -> write-char)
(extern rt_write_string 1 -> write-string)
(extern rt_write_string_ln 1 -> write-string-ln)
(extern rt_symbol_to_string 1 -> string<-symbol)


(defun print (sexp)
  (case (type sexp)
    (fixnum-t (print-fixnum sexp))
    (cons-t (print-cons sexp))
    (nil-t (write-string "nil"))
    (bool-t (write-string (if sexp "true" "false")))
    (symbol-t (write-string (string<-symbol sexp)))
    ;; TODO: this doesn't actually work until we support 'otherwise' or something
    (true
      (panic! "AAAARRRGGHHH!"))))

(defun print-fixnum (x)
  (if (< x 10)
    (write-char (+ x 48)) ; 48 = #\0
    (panic! "Too big!!!")))

(defun print-cons (c)
  (write-string "(")
  (print (car c))
  (%print-tail (cdr c)))

(defun %print-tail (c)
  (cond
    ((nil? c)
     (write-string ")"))
    ((cons? c)
     (write-string " ")
     (print (car c))
     (%print-tail (cdr c)))
    (true
     (write-string " . ")
     (print c)
     (write-string ")"))))
